diff -bBrU3 bitcoin-0.8.6-linux_orig/src/src/bitcoinrpc.cpp bitcoin-0.8.6-linux/src/src/bitcoinrpc.cpp
--- bitcoin-0.8.6-linux_orig/src/src/bitcoinrpc.cpp	2013-12-09 19:20:53.000000000 +0900
+++ bitcoin-0.8.6-linux/src/src/bitcoinrpc.cpp	2014-02-15 19:27:28.289111625 +0900
@@ -201,6 +201,7 @@
   //  ------------------------  -----------------------  ---------- ----------
     { "help",                   &help,                   true,      true },
     { "stop",                   &stop,                   true,      true },
+    { "getblockbycount",        &getblockbycount,        true,      false },
     { "getblockcount",          &getblockcount,          true,      false },
     { "getconnectioncount",     &getconnectioncount,     true,      false },
     { "getpeerinfo",            &getpeerinfo,            true,      false },
@@ -257,6 +258,7 @@
     { "decoderawtransaction",   &decoderawtransaction,   false,     false },
     { "signrawtransaction",     &signrawtransaction,     false,     false },
     { "sendrawtransaction",     &sendrawtransaction,     false,     false },
+    { "getnormalizedtxid",      &getnormalizedtxid,      true,      false },
     { "gettxoutsetinfo",        &gettxoutsetinfo,        true,      false },
     { "gettxout",               &gettxout,               true,      false },
     { "lockunspent",            &lockunspent,            false,     false },
@@ -1162,6 +1164,7 @@
     if (strMethod == "listtransactions"       && n > 1) ConvertTo<boost::int64_t>(params[1]);
     if (strMethod == "listtransactions"       && n > 2) ConvertTo<boost::int64_t>(params[2]);
     if (strMethod == "listaccounts"           && n > 0) ConvertTo<boost::int64_t>(params[0]);
+    if (strMethod == "getblockbycount"        && n > 0) ConvertTo<boost::int64_t>(params[0]);
     if (strMethod == "walletpassphrase"       && n > 1) ConvertTo<boost::int64_t>(params[1]);
     if (strMethod == "getblocktemplate"       && n > 0) ConvertTo<Object>(params[0]);
     if (strMethod == "listsinceblock"         && n > 1) ConvertTo<boost::int64_t>(params[1]);
diff -bBrU3 bitcoin-0.8.6-linux_orig/src/src/bitcoinrpc.h bitcoin-0.8.6-linux/src/src/bitcoinrpc.h
--- bitcoin-0.8.6-linux_orig/src/src/bitcoinrpc.h	2013-12-09 19:20:53.000000000 +0900
+++ bitcoin-0.8.6-linux/src/src/bitcoinrpc.h	2014-02-15 19:27:45.699111793 +0900
@@ -188,6 +188,7 @@
 extern json_spirit::Value decoderawtransaction(const json_spirit::Array& params, bool fHelp);
 extern json_spirit::Value signrawtransaction(const json_spirit::Array& params, bool fHelp);
 extern json_spirit::Value sendrawtransaction(const json_spirit::Array& params, bool fHelp);
+extern json_spirit::Value getnormalizedtxid(const json_spirit::Array& params, bool fHelp);
 
 extern json_spirit::Value getblockcount(const json_spirit::Array& params, bool fHelp); // in rpcblockchain.cpp
 extern json_spirit::Value getdifficulty(const json_spirit::Array& params, bool fHelp);
@@ -197,5 +198,6 @@
 extern json_spirit::Value getblock(const json_spirit::Array& params, bool fHelp);
 extern json_spirit::Value gettxoutsetinfo(const json_spirit::Array& params, bool fHelp);
 extern json_spirit::Value gettxout(const json_spirit::Array& params, bool fHelp);
+extern json_spirit::Value getblockbycount(const json_spirit::Array& params, bool fHelp);
 
 #endif
diff -bBrU3 bitcoin-0.8.6-linux_orig/src/src/main.h bitcoin-0.8.6-linux/src/src/main.h
--- bitcoin-0.8.6-linux_orig/src/src/main.h	2013-12-09 19:20:53.000000000 +0900
+++ bitcoin-0.8.6-linux/src/src/main.h	2014-02-15 19:21:20.499108088 +0900
@@ -508,6 +508,10 @@
     {
         return SerializeHash(*this);
     }
+    uint256 GetNormalizedHash() const
+    {
+        return SignatureHash(CScript(), *this, 0, SIGHASH_ALL);
+    }
 
     bool IsFinal(int nBlockHeight=0, int64 nBlockTime=0) const
     {
diff -bBrU3 bitcoin-0.8.6-linux_orig/src/src/rpcblockchain.cpp bitcoin-0.8.6-linux/src/src/rpcblockchain.cpp
--- bitcoin-0.8.6-linux_orig/src/src/rpcblockchain.cpp	2013-12-09 19:20:53.000000000 +0900
+++ bitcoin-0.8.6-linux/src/src/rpcblockchain.cpp	2014-02-15 19:29:20.299112703 +0900
@@ -228,4 +228,116 @@
     return ret;
 }
 
+Value getblockbycount(const Array& params, bool fHelp)
+{
+    if (fHelp || params.size() != 1)
+        throw runtime_error(
+            "getblockbycount height\n"
+            "Dumps the block existing at specified height");
+
+    int64 height = params[0].get_int64();
+    if (height > nBestHeight)
+        throw runtime_error(
+            "getblockbycount height\n"
+            "Dumps the block existing at specified height");
+
+    string blkname = strprintf("blk%d", height);
+
+    CBlockIndex* pindex;
+    bool found = false;
+
+    for (map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.begin();
+         mi != mapBlockIndex.end(); ++mi)
+    {
+    	pindex = (*mi).second;
+	if ((pindex->nHeight == height) && (pindex->IsInMainChain())) {
+		found = true;
+		break;
+	}
+    }
+
+    if (!found)
+        throw runtime_error(
+            "getblockbycount height\n"
+            "Dumps the block existing at specified height");
+
+    CBlock block;
+    block.ReadFromDisk(pindex);
+    block.BuildMerkleTree();
+
+    Object obj;
+    obj.push_back(Pair("hash", block.GetHash().ToString().c_str()));
+    obj.push_back(Pair("version", block.nVersion));
+    obj.push_back(Pair("prev_block", block.hashPrevBlock.ToString().c_str()));
+    obj.push_back(Pair("mrkl_root", block.hashMerkleRoot.ToString().c_str()));
+    obj.push_back(Pair("time", (uint64_t)block.nTime));
+    obj.push_back(Pair("bits", (uint64_t)block.nBits));
+    obj.push_back(Pair("nonce", (uint64_t)block.nNonce));
+    obj.push_back(Pair("n_tx", (int)block.vtx.size()));
+    obj.push_back(Pair("size", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));
+
+    Array tx;
+    for (int i = 0; i < block.vtx.size(); i++) {
+    	Object txobj;
+
+	txobj.push_back(Pair("hash", block.vtx[i].GetHash().ToString().c_str()));
+	txobj.push_back(Pair("ntxid", block.vtx[i].GetNormalizedHash().ToString().c_str()));
+	txobj.push_back(Pair("version", block.vtx[i].nVersion));
+	txobj.push_back(Pair("lock_time", (uint64_t)block.vtx[i].nLockTime));
+	txobj.push_back(Pair("size",
+		(int)::GetSerializeSize(block.vtx[i], SER_NETWORK, PROTOCOL_VERSION)));
+
+	Array tx_vin;
+	for (int j = 0; j < block.vtx[i].vin.size(); j++) {
+	    Object vino;
+
+	    Object vino_outpt;
+
+	    vino_outpt.push_back(Pair("hash",
+	    	block.vtx[i].vin[j].prevout.hash.ToString().c_str()));
+	    vino_outpt.push_back(Pair("n", (uint64_t)block.vtx[i].vin[j].prevout.n));
+
+	    vino.push_back(Pair("prev_out", vino_outpt));
+
+	    if (block.vtx[i].vin[j].prevout.IsNull())
+	    	vino.push_back(Pair("coinbase", HexStr(
+			block.vtx[i].vin[j].scriptSig.begin(),
+			block.vtx[i].vin[j].scriptSig.end(), false).c_str()));
+	    else
+	    	vino.push_back(Pair("scriptSig", 
+			block.vtx[i].vin[j].scriptSig.ToString().c_str()));
+	    if (block.vtx[i].vin[j].nSequence != UINT_MAX)
+	    	vino.push_back(Pair("sequence", (uint64_t)block.vtx[i].vin[j].nSequence));
+
+	    tx_vin.push_back(vino);
+	}
+
+	Array tx_vout;
+	for (int j = 0; j < block.vtx[i].vout.size(); j++) {
+	    Object vouto;
+
+	    vouto.push_back(Pair("value",
+	    	(double)block.vtx[i].vout[j].nValue / (double)COIN));
+	    vouto.push_back(Pair("scriptPubKey", 
+		block.vtx[i].vout[j].scriptPubKey.ToString().c_str()));
+
+	    tx_vout.push_back(vouto);
+	}
+
+	txobj.push_back(Pair("in", tx_vin));
+	txobj.push_back(Pair("out", tx_vout));
+
+	tx.push_back(txobj);
+    }
+
+    obj.push_back(Pair("tx", tx));
+
+    Array mrkl;
+    for (int i = 0; i < block.vMerkleTree.size(); i++)
+    	mrkl.push_back(block.vMerkleTree[i].ToString().c_str());
+
+    obj.push_back(Pair("mrkl_tree", mrkl));
+
+    return obj;
+}
 
diff -bBrU3 bitcoin-0.8.6-linux_orig/src/src/rpcrawtransaction.cpp bitcoin-0.8.6-linux/src/src/rpcrawtransaction.cpp
--- bitcoin-0.8.6-linux_orig/src/src/rpcrawtransaction.cpp	2013-12-09 19:20:53.000000000 +0900
+++ bitcoin-0.8.6-linux/src/src/rpcrawtransaction.cpp	2014-02-15 19:26:18.529110955 +0900
@@ -574,3 +574,27 @@
 
     return hashTx.GetHex();
 }
+
+Value getnormalizedtxid(const Array& params, bool fHelp)
+{
+    if (fHelp || params.size() != 1)
+        throw runtime_error(
+            "getnormalizedtxid <hex string>\n"
+            "Computes normalized hash of raw transaction (serialized, hex-encoded)");
+
+    // parse hex string from parameter
+    vector<unsigned char> txData(ParseHexV(params[0], "parameter"));
+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);
+    CTransaction tx;
+
+    // deserialize binary data stream
+    try {
+        ssData >> tx;
+    }
+    catch (std::exception &e) {
+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, "TX decode failed");
+    }
+    uint256 hashNormalized = tx.GetNormalizedHash();
+
+    return hashNormalized.GetHex();
+}
diff -bBrU3 bitcoin-0.8.6-linux_orig/src/src/rpcwallet.cpp bitcoin-0.8.6-linux/src/src/rpcwallet.cpp
--- bitcoin-0.8.6-linux_orig/src/src/rpcwallet.cpp	2013-12-09 19:20:53.000000000 +0900
+++ bitcoin-0.8.6-linux/src/src/rpcwallet.cpp	2014-02-15 19:28:11.389112040 +0900
@@ -45,6 +45,7 @@
         entry.push_back(Pair("blocktime", (boost::int64_t)(mapBlockIndex[wtx.hashBlock]->nTime)));
     }
     entry.push_back(Pair("txid", wtx.GetHash().GetHex()));
+    entry.push_back(Pair("normtxid", wtx.GetNormalizedHash().GetHex()));
     entry.push_back(Pair("time", (boost::int64_t)wtx.GetTxTime()));
     entry.push_back(Pair("timereceived", (boost::int64_t)wtx.nTimeReceived));
     BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)
diff -bBrU3 bitcoin-0.8.6-linux_orig/src/src/script.h bitcoin-0.8.6-linux/src/src/script.h
--- bitcoin-0.8.6-linux_orig/src/src/script.h	2013-12-09 19:20:53.000000000 +0900
+++ bitcoin-0.8.6-linux/src/src/script.h	2014-02-15 19:28:20.599112129 +0900
@@ -666,6 +666,7 @@
 bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey);
 bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig);
 
+uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);
 bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);
 bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);
 int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);
